#!/usr/bin/env node

/**
 * 打包macOS arm64 dmg文件
 * @type {path.PlatformPath | path}
 */

const path = require("node:path");
const fs = require("fs");
const process = require("node:process");


function DistributeDarwinArm64() {

    this.run = () => {
        const packageJsonPath = path.join(__dirname, '../../package.json');
        // 读取并解析package.json文件
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        // 获取包名
        const appName = packageJson.name;
        const version = packageJson.version;
        const RELEASE_MAC_ARM64_APP_DIR =
            path.join(__dirname, `../../out/${appName}-${process.platform}-${process.arch}/${appName}.app`);

        function runCommand(command, afterDoing = () => 0) {
            console.log("正在执行：" + command);
            let exec = require('child_process').exec;
            exec(command, function (err, stdout, stderr) {
                if (err) {
                    console.log('error:' + stderr);
                } else {
                    console.log(stdout);
                    afterDoing();
                }
            });
        }

        // 写入配置
        fs.writeFile(path.join(__dirname, './appdmg_conf.json'), JSON.stringify({
            "title": appName,
            "background": path.join(__dirname, "./media/dmg_back.jpg"),
            "icon-size": 120,
            "contents": [
                {"x": 173, "y": 274, "type": 'file', "path": RELEASE_MAC_ARM64_APP_DIR},
                {"x": 600, "y": 278, "type": 'link', "path": '/Applications'},
            ],
            "window": {
                "size": {
                    "width": 802,
                    "height": 608,
                }
            }
        }, null, "\t"), (err) => {
            if (err) {
                console.log('运行appdmg出错...');
                throw err;
            }
            console.log('配置文件已写入...');
            runCommand(`rm -rf "` + path.join(__dirname, `./${appName}-${version}-${process.platform}-${process.arch}.dmg`) + `"`, () => {
                // 先将代码编译成散装可执行程序
                runCommand(`export ELECTRON_ENABLE_OFFLINE_MODE=1 && ${ path.join(__dirname + "../../../node_modules/.bin/electron-forge") } make --offline`, () => {
                    // 调用appdmg命令
                    runCommand(`${ path.join(__dirname + "../../../node_modules/.bin/appdmg") } "` + path.join(__dirname, "./appdmg_conf.json")
                        + `" "` + path.join(__dirname, `./${appName}-${version}-${process.platform}-${process.arch}.dmg`) + `"`, () => {
                        console.log(`${appName}-${version}-${process.platform}-${process.arch}.dmg打包成功！`);
                    });
                });
            });
        });
    };
}

module.exports = DistributeDarwinArm64;
